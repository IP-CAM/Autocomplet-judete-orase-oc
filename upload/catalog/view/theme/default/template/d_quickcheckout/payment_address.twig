<script>console.log('payment adres twig');</script>
<script>
//ajax quick checkout payment address
var idPaymentRegion = '#payment_address_zone_id';
var idPaymentCity = '#payment_address_city';
var idPaymentCitySelect = '#selectpayment_address_city';
var idPaymentPostCode = '#payment_address_postcode';

function paymentGenerateSelectForRegionAndCity() {
    
  console.log('XXX -3- paymentGenerateSelectForRegionAndCity make input select2');
 

  $(idPaymentCity).before('<select class="form-control required city" id="' + idPaymentCitySelect.replace('#', '') + '"></select>');
  $(idPaymentCity).hide();
//   $(idPaymentCitySelect).select2({

//     placeholder: {
//       id: '-1', // the value of the option
//       text: 'Alege localitate'
//     },
//     width: '100%',
//     "language": {
//       "noResults": function () {
//         return "Nu sunt localitati";
//       }
//     },
//   });
}

function initPaymentAutocomplete() {
  console.log('XXX -2- initPaymentAutocomplete');
  this.paymentGenerateSelectForRegionAndCity();

  // Binding the login_view input buttons when they are clicked to keep the binding alive to overcome the binding loss when the view is rendered.
  $('#login_view input[name=account]').on('click', function () {
    console.log('XXX payment click on input name account');
    // Need to wait for a second before calling the initPaymentAutocomplete(), otherwise the view is not fully rendered yet, the reference to the payment address cannot be found.
    setTimeout(function () {
      this.initPaymentAutocomplete();
    }, 1000);
  });

  $('#payment_address_shipping_address').on('change', function (e) {
    console.log('XXX payment change same address on input name account');
    // Need to wait for a second before calling the initPaymentAutocomplete(), otherwise the view is not fully rendered yet, the reference to the payment address cannot be found.
    if (!e.currentTarget.checked) {
      console.log('bifata');
      setTimeout(function () {
        this.initShippingAutocomplete();
      }, 1000);
    }
  });

  $(idPaymentRegion).on('change', function (e) {
    console.log('XXX -5- schimba judet');
    // Need to wait before calling the initPaymentAutocomplete(), otherwise the view is not fully rendered yet, the reference to the payment address cannot be found.
    setTimeout(function () {
      this.paymentAutocompleteCity(e);
    }, 500);
  });

  $(idPaymentCitySelect).on('change', function (e) {
    console.log('XXX -6- schimba localitate zip: ', $(e.currentTarget), $(e.currentTarget.selectedOptions[0]).text(), e.currentTarget.value);
    // Need to wait before calling the initPaymentAutocomplete(), otherwise the view is not fully rendered yet, the reference to the payment address cannot be found.
    $(idPaymentCity).val($(e.currentTarget.selectedOptions[0]).text()).trigger('change');
    $(idPaymentPostCode).val(e.currentTarget.value).trigger('change');
  });

  var judetAles = document.getElementById('payment_address_address_1');

//   $(idPaymentRegion).find('option')[0].remove();
//   $(idPaymentRegion).select2({
//     placeholder: {
//       id: '-1', // the value of the option
//       text: 'Alege judet'
//     },
//     width: '100%',
//     "language": {
//       "noResults": function () {
//         return "Nu exista judete";
//       }
//     },
//   }).val(2679).trigger('change');
  //this.paymentAutocomplete(window);
}

function paymentAutocompleteCity(e) {
  console.log('XXX -4- paymentAutocomplete', $(e.currentTarget.selectedOptions[0]).text());

  var judetAles = $(e.currentTarget.selectedOptions[0]).text();

  var numeLocalitati = _.map(_.filter(window.bulkData, (obj) => {
    if (judetAles === 'Satu-Mare') {
      judetAles = 'Satu Mare';
    } else if (judetAles === 'Dimbovita') {
      judetAles = 'Dambovita'
    }
    return obj.region2_latin == judetAles
  }), (loc) => {
    return {
      nume: (judetAles === "Bucuresti" ? loc.region3_latin : loc.name_latin),
      zip: loc.zip
    };
  });

  $(idPaymentCitySelect).empty();
  var option = '';
  for (var i = 0; i < numeLocalitati.length; i++) {
    var newOption = new Option(numeLocalitati[i].nume, numeLocalitati[i].zip);
    $(idPaymentCitySelect).append(newOption);
  }

  $(idPaymentCitySelect).trigger('change');
}

setTimeout(function () {
  var url = '/catalog/view/javascript/autocomplete-zip/locality.json';

  function getJsonLocalityPayment() {
    $.ajax({
      url: url,
      dataType: 'json',
      success: function (data) {
       console.log('succ');
        window.bulkData = data;
        initPaymentAutocomplete()
      },
      statusCode: {
        404: function () {
          alert('There was a problem with the server.  Try again soon!');
        }
      }
    });
  }
  getJsonLocalityPayment()
  console.log('XXX -1- load and call initPaymentAutocomplete');
  //initPaymentAutocomplete(); // Call initPaymentAutocomplete() upon page loaded, otherwise, Google Address Autocomplete will not work.
 }, 5000);
				
				</script>
<div id="payment_address" class="qc-step" data-col="{{ col }}" data-row="{{ row }}"></div>
<script type="text/html" id="payment_address_template">
<div class="<%= parseInt(model.config.display) ? '' : 'hidden' %>">
	<div class="panel panel-default">
		<div class="panel-heading">
			<h4 class="panel-title">
				<span class="icon">
					<i class="<%= model.config.icon %>"></i>
				</span>
				<span class="text"><%= model.config.title %></span>
			</h4>
		</div>
		<div class="panel-body">
			<% if(model.config.description){ %><p class="description"><%= model.config.description %></p><% } %>
			<% if(model.account == 'logged'){ %>
				<% if(_.size(model.addresses) > 0){ %>
					<p>{{ text_address_existing }}</p>

					<% if(config.design.address_style == 'list') { %>
					<div class="list-group">
					<% _.each (model.addresses, function(address) { %>
						<div class="list-group-item <%= address.address_id == model.payment_address.address_id ? 'active' : '' %>">
				            <label for="payment_address_exists_<%= address.address_id %>">
				            	<input type="radio" name="payment_address[address_id]" class="payment-address"  value="<%= address.address_id %>" id="payment_address_exists_<%= address.address_id %>" <%= address.address_id == model.payment_address.address_id ? 'checked="checked"' : '' %> data-refresh="2" autocomplete='off' />
				              	<div class="address-item" ><%= sformat(address.address_format, address) %> </div>
				            </label>
				        </div>
			        <% }) %>
					</div>
					<% }else{ %>
						<% _.each (model.addresses, function(address) { %>
						<div class="radio-input">
							<label for="payment_address_exists_<%= address.address_id %>">
				            	<input type="radio" name="payment_address[address_id]" class="payment-address" value="<%= address.address_id %>" id="payment_address_exists_<%= address.address_id %>" <%= address.address_id == model.payment_address.address_id ? 'checked="checked"' : '' %> data-refresh="2" autocomplete='off' />
				                <strong> <%= address.firstname %>
				                <%= address.lastname %></strong>
				                <%= address.address_1 %>
				                <%= address.address_2 %>
				                <%= address.city %>
				                <%= address.zone %>
				                <%= address.country %>,
				                <%= address.postcode %>
				            </label>
			            </div>
			            <% }) %>
					<% } %>
				<% } %>
				<div class="radio-input">
		            <input type="radio" name="payment_address[address_id]" class="payment-address" value="new" id="payment_address_exists_new" <%= (model.payment_address.address_id == 'new' || model.payment_address.address_id == 0) ? 'checked="checked"' : '' %> data-refresh="2" autocomplete='off' />
		            <label for="payment_address_exists_new">
		                {{ text_address_new }}
		            </label>
		        </div>
		        <form id="payment_address_form" class="form-horizontal <%= model.payment_address.address_id == 'new' ? '' : 'hidden' %>">

				</form>

			<% }else{ %>
			<form id="payment_address_form" class="form-horizontal">

			</form>
			<% } %>
		</div>
	</div>
</div>
</script>

<script>
$(function() {
	qc.paymentAddress = $.extend(true, {}, new qc.PaymentAddress({{ json }}));
	qc.paymentAddressView = $.extend(true, {}, new qc.PaymentAddressView({
		el:$("#payment_address"),
		model: qc.paymentAddress,
		template: _.template($("#payment_address_template").html())
	}));
	qc.paymentAddressView.setZone(qc.paymentAddress.get('payment_address.country_id'));

})

</script>